name: C

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'demo/c/**'
      - '!demo/c/README.md'
      - 'project/**'
      - '!project/README.md'
      - '.github/workflows/c.yml'
      - '.github/actions/c-template/action.yml'
  pull_request:
    branches: [ main, 'v[0-9]+.[0-9]+' ]
    paths:
      - 'demo/c/**'
      - '!demo/c/README.md'
      - 'project/**'
      - '!project/README.md'
      - '.github/workflows/c.yml'
      - '.github/actions/c-template/action.yml'

jobs:
  build-linux:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04]
        include:
          - os: ubuntu-22.04
            pv_recorder_platform: linux
            output_dir: linux/x86_64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/c-template
        name: Build and test
        with:
          pv_recorder_platform: ${{ matrix.pv_recorder_platform }}
          output_dir: ${{ matrix.output_dir }}

  build-rpis:
    runs-on: ${{ matrix.machine }}
    strategy:
      matrix:
        pv_recorder_platform: [
          raspberry-pi,
          raspberry-pi3,
          raspberry-pi3-64,
          raspberry-pi4,
          raspberry-pi4-64,
          raspberry-pi5,
          raspberry-pi5-64
        ]
        include:
          - pv_recorder_platform: raspberry-pi
            machine: rpi3-32
            output_dir: raspberry-pi/arm11
          - pv_recorder_platform: raspberry-pi3
            machine: rpi3-32
            output_dir: raspberry-pi/cortex-a53
          - pv_recorder_platform: raspberry-pi3-64
            machine: rpi3-64
            output_dir: raspberry-pi/cortex-a53-aarch64
          - pv_recorder_platform: raspberry-pi4
            machine: rpi4-32
            output_dir: raspberry-pi/cortex-a72
          - pv_recorder_platform: raspberry-pi4-64
            machine: rpi4-64
            output_dir: raspberry-pi/cortex-a72-aarch64
          - pv_recorder_platform: raspberry-pi5
            machine: rpi5-32
            output_dir: raspberry-pi/cortex-a76
          - pv_recorder_platform: raspberry-pi5-64
            machine: rpi5-64
            output_dir: raspberry-pi/cortex-a76-aarch64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/c-template
        name: Build and test
        with:
          pv_recorder_platform: ${{ matrix.pv_recorder_platform }}
          output_dir: ${{ matrix.output_dir }}

  build-mac:
    runs-on: pv-ios
    strategy:
      matrix:
        pv_recorder_platform: [mac-arm64, mac-x86_64]
        include:
          - pv_recorder_platform: mac-arm64
            output_dir: mac/arm64
          - pv_recorder_platform: mac-x86_64
            output_dir: mac/x86_64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/c-template
        name: Build and test
        with:
          pv_recorder_platform: ${{ matrix.pv_recorder_platform }}
          output_dir: ${{ matrix.output_dir }}

  build-windows:
    runs-on: ${{ matrix.machine }}
    strategy:
      matrix:
        pv_recorder_platform: [windows-amd64, windows-arm64]
        include:
          - pv_recorder_platform: windows-amd64
            machine: pv-windows
            output_dir: windows/amd64
          - pv_recorder_platform: windows-arm64
            machine: pv-windows-arm64
            output_dir: windows/arm64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/c-template
        name: Build and test
        with:
          pv_recorder_platform: ${{ matrix.pv_recorder_platform }}
          output_dir: ${{ matrix.output_dir }}
          shell: pwsh

  collect-artifacts:
    runs-on: ubuntu-latest
    needs: [build-linux, build-rpis, build-mac, build-windows]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Make collection directory
        run: mkdir -p all-libs/lib

      - name: Collect artifacts
        shell: bash
        run: |
          for DIR in artifacts/*; do cp -a $DIR/* all-libs/lib/; done

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-libs
          path: all-libs
          retention-days: 3
